import { c as createAstro, a as createComponent, r as renderTemplate, m as maybeRenderHead, b as addAttribute, s as spreadAttributes, u as unescapeHTML, d as renderComponent, e as renderSlot, f as renderHead } from '../astro.9dda6fe9.mjs';
/* empty css                           */import Stripe from 'stripe';
import { createClient } from '@sanity/client';
import imageUrlBuilder from '@sanity/image-url';
import Mailgun from 'mailgun.js';
import FormData from 'form-data';

function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
const ATTR_REGEX = /[&"]/g;
const CONTENT_REGEX = /[&<]/g;
/**
 * Note: this method is performance sensitive and has been optimized
 * https://github.com/sveltejs/svelte/pull/5701
 */
function escape(value, is_attr = false) {
    const str = String(value);
    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;
    pattern.lastIndex = 0;
    let escaped = '';
    let last = 0;
    while (pattern.test(str)) {
        const i = pattern.lastIndex - 1;
        const ch = str[i];
        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '"' ? '&quot;' : '&lt;'));
        last = i + 1;
    }
    return escaped + str.substring(last);
}
function validate_component(component, name) {
    if (!component || !component.$$render) {
        if (name === 'svelte:component')
            name += ' this={...}';
        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);
    }
    return component;
}
let on_destroy;
function create_ssr_component(fn) {
    function $$render(result, props, bindings, slots, context) {
        const parent_component = current_component;
        const $$ = {
            on_destroy,
            context: new Map(context || (parent_component ? parent_component.$$.context : [])),
            // these will be immediately discarded
            on_mount: [],
            before_update: [],
            after_update: [],
            callbacks: blank_object()
        };
        set_current_component({ $$ });
        const html = fn(result, props, bindings, slots);
        set_current_component(parent_component);
        return html;
    }
    return {
        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {
            on_destroy = [];
            const result = { title: '', head: '', css: new Set() };
            const html = $$render(result, props, {}, $$slots, context);
            run_all(on_destroy);
            return {
                html,
                css: {
                    code: Array.from(result.css).map(css => css.code).join('\n'),
                    map: null // TODO
                },
                head: result.title + result.head
            };
        },
        $$render
    };
}
function add_attribute(name, value, boolean) {
    if (value == null || (boolean && !value))
        return '';
    const assignment = (boolean && value === true) ? '' : `="${escape(value, true)}"`;
    return ` ${name}${assignment}`;
}

const client = createClient({
  projectId: ({}).SANITY_PROJECT_ID ?? "",
  dataset: ({}).SANITY_DATASET ?? "",
  useCdn: "production" === "production",
  apiVersion: "2023-04-05",
  token: ({}).SANITY_READ_TOKEN ?? ""
});
const builder = imageUrlBuilder(client);
const getJobOffers = async () => {
  const job_offers = await client.fetch(
    '*[_type == "job_offer" && is_active == true] | order(_createdAt desc)'
  );
  return job_offers;
};
const getSiteConfig = async () => {
  const site_config = await client.fetch('*[_type == "site_config"]');
  return site_config[0];
};
const resolveImageUrl = (image) => {
  return builder.image(image).url();
};
const postJobOffer = async (jobOffer) => {
  const { _id } = await client.create(jobOffer);
  return _id;
};
const deleteJobOffer = async (_id) => {
  await client.delete(_id);
};
const postAsset = async (image) => {
  const { _id } = await client.assets.upload("image", image);
  return _id;
};
const decrementFreeSlots = async () => {
  const data = await getSiteConfig();
  if (data) {
    const { free_slots } = data;
    if (free_slots > 0) {
      client.patch("site_config").set({ free_slots: free_slots - 1 }).commit();
      console.log(
        "Decrementing a free slot, there's now",
        free_slots - 1,
        "slots left"
      );
    }
  }
};
const activateJobOffer = async (stripeId) => {
  const jobOffer = await client.fetch(
    `*[_type == "job_offer" && stripe_id=="${stripeId}"]`
  );
  await client.patch(jobOffer._id).set({ is_active: true });
};

/* src/components/utils/Section/Section.svelte generated by Svelte v3.58.0 */

const Section = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { id } = $$props;
	if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
	return `<section class="px-4 lg:px-16 py-12 lg:py-16"${add_attribute("id", id, 0)}>${slots.default ? slots.default({}) : ``}</section>`;
});

/* src/components/utils/Container/Container.svelte generated by Svelte v3.58.0 */

const Container = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return `<div class="container mx-auto">${slots.default ? slots.default({}) : ``}</div>`;
});

/* src/components/global/Header/Header.svelte generated by Svelte v3.58.0 */

const Header = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return `<header class="sticky top-0 z-50 inset-x-0 p-6 backdrop-blur-md">${validate_component(Container, "Container").$$render($$result, {}, {}, {
		default: () => {
			return `<nav class="flex items-center justify-between"><div><a href="/" class="text-2xl font-black">ðŸš€ Astro<span class="text-orange-600">Jobs</span></a></div>
			<div class="flex items-center gap-x-5"><div><ul class="flex items-center gap-x-5"><li><a href="/post-an-offer" class="btn btn-primary">ðŸ’¼ Post an offer</a></li></ul></div></div></nav>`;
		}
	})}</header>`;
});

const $$Astro$9 = createAstro("https://astrojobs.net");
const $$Footer = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$9, $$props, $$slots);
  Astro2.self = $$Footer;
  return renderTemplate`${maybeRenderHead($$result)}<footer class="p-6 dark:bg-slate-950 space-y-4 lg:flex lg:items-center lg:space-y-0">
	<div class="lg:flex-1">
		<p class="text-xl font-black text-center">
			ðŸš€ Astro<span class="text-orange-600">Jobs</span>
		</p>
	</div>
	<div class="lg:flex-1">
		<ul class="items-center flex gap-x-4 justify-center">
			<li>
				<a class="small hover:text-orange-600 transition duration-300" href="mailto:support@astrojobs.net">Contact us</a>
			</li>
			<li>
				<a class="small hover:text-orange-600 transition duration-300" href="/privacy-policy">Privacy Policy</a>
			</li>
			<li>
				<a class="small hover:text-orange-600 transition duration-300" href="/post-an-offer">Post an offer</a>
			</li>
		</ul>
	</div>
	<div class="lg:flex-1">
		<p class="text-white/60 small text-center">
			AstroJobs is not affiliated with <a class="underline" href="https://astro.build">astrodotbuild</a>.
		</p>
	</div>
</footer>`;
}, "/Users/shaun/Desktop/lab/astrojobs/apps/frontend/src/components/global/Footer/Footer.astro");

const $$Astro$8 = createAstro("https://astrojobs.net");
const $$OpenGraphArticleTags = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$8, $$props, $$slots);
  Astro2.self = $$OpenGraphArticleTags;
  const { publishedTime, modifiedTime, expirationTime, authors, section, tags } = Astro2.props.openGraph.article;
  return renderTemplate`${publishedTime ? renderTemplate`<meta property="article:published_time"${addAttribute(publishedTime, "content")}>` : null}
${modifiedTime ? renderTemplate`<meta property="article:modified_time"${addAttribute(modifiedTime, "content")}>` : null}
${expirationTime ? renderTemplate`<meta property="article:expiration_time"${addAttribute(expirationTime, "content")}>` : null}
${authors ? authors.map((author) => renderTemplate`<meta property="article:author"${addAttribute(author, "content")}>`) : null}
${section ? renderTemplate`<meta property="article:section"${addAttribute(section, "content")}>` : null}
${tags ? tags.map((tag) => renderTemplate`<meta property="article:tag"${addAttribute(tag, "content")}>`) : null}`;
}, "/Users/shaun/Desktop/lab/astrojobs/node_modules/astro-seo/src/components/OpenGraphArticleTags.astro");

const $$Astro$7 = createAstro("https://astrojobs.net");
const $$OpenGraphBasicTags = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$7, $$props, $$slots);
  Astro2.self = $$OpenGraphBasicTags;
  const { openGraph } = Astro2.props;
  return renderTemplate`<meta property="og:title"${addAttribute(openGraph.basic.title, "content")}>
<meta property="og:type"${addAttribute(openGraph.basic.type, "content")}>
<meta property="og:image"${addAttribute(openGraph.basic.image, "content")}>
<meta property="og:url"${addAttribute(openGraph.basic.url || Astro2.url.href, "content")}>`;
}, "/Users/shaun/Desktop/lab/astrojobs/node_modules/astro-seo/src/components/OpenGraphBasicTags.astro");

const $$Astro$6 = createAstro("https://astrojobs.net");
const $$OpenGraphImageTags = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$6, $$props, $$slots);
  Astro2.self = $$OpenGraphImageTags;
  const { image } = Astro2.props.openGraph.basic;
  const { secureUrl, type, width, height, alt } = Astro2.props.openGraph.image;
  return renderTemplate`<meta property="og:image:url"${addAttribute(image, "content")}>
${secureUrl ? renderTemplate`<meta property="og:image:secure_url"${addAttribute(secureUrl, "content")}>` : null}
${type ? renderTemplate`<meta property="og:image:type"${addAttribute(type, "content")}>` : null}
${width ? renderTemplate`<meta property="og:image:width"${addAttribute(width, "content")}>` : null}
${!(height === null) ? renderTemplate`<meta property="og:image:height"${addAttribute(height, "content")}>` : null}
${!(alt === null) ? renderTemplate`<meta property="og:image:alt"${addAttribute(alt, "content")}>` : null}`;
}, "/Users/shaun/Desktop/lab/astrojobs/node_modules/astro-seo/src/components/OpenGraphImageTags.astro");

const $$Astro$5 = createAstro("https://astrojobs.net");
const $$OpenGraphOptionalTags = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$5, $$props, $$slots);
  Astro2.self = $$OpenGraphOptionalTags;
  const { optional } = Astro2.props.openGraph;
  return renderTemplate`${optional.audio ? renderTemplate`<meta property="og:audio"${addAttribute(optional.audio, "content")}>` : null}
${optional.description ? renderTemplate`<meta property="og:description"${addAttribute(optional.description, "content")}>` : null}
${optional.determiner ? renderTemplate`<meta property="og:determiner"${addAttribute(optional.determiner, "content")}>` : null}
${optional.locale ? renderTemplate`<meta property="og:locale"${addAttribute(optional.locale, "content")}>` : null}
${optional.localeAlternate?.map((locale) => renderTemplate`<meta property="og:locale:alternate"${addAttribute(locale, "content")}>`)}
${optional.siteName ? renderTemplate`<meta property="og:site_name"${addAttribute(optional.siteName, "content")}>` : null}
${optional.video ? renderTemplate`<meta property="og:video"${addAttribute(optional.video, "content")}>` : null}`;
}, "/Users/shaun/Desktop/lab/astrojobs/node_modules/astro-seo/src/components/OpenGraphOptionalTags.astro");

const $$Astro$4 = createAstro("https://astrojobs.net");
const $$ExtendedTags = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$4, $$props, $$slots);
  Astro2.self = $$ExtendedTags;
  const { props } = Astro2;
  return renderTemplate`${props.extend.link?.map((attributes) => renderTemplate`<link${spreadAttributes(attributes)}>`)}
${props.extend.meta?.map(({ content, httpEquiv, name, property }) => renderTemplate`<meta${addAttribute(content, "content")}${addAttribute(httpEquiv, "http-equiv")}${addAttribute(name, "name")}${addAttribute(property, "property")}>`)}`;
}, "/Users/shaun/Desktop/lab/astrojobs/node_modules/astro-seo/src/components/ExtendedTags.astro");

const $$Astro$3 = createAstro("https://astrojobs.net");
const $$TwitterTags = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$3, $$props, $$slots);
  Astro2.self = $$TwitterTags;
  const { card, site, title, creator, description, image, imageAlt } = Astro2.props.twitter;
  return renderTemplate`${card ? renderTemplate`<meta name="twitter:card"${addAttribute(card, "content")}>` : null}
${site ? renderTemplate`<meta name="twitter:site"${addAttribute(site, "content")}>` : null}
${title ? renderTemplate`<meta name="twitter:title"${addAttribute(title, "content")}>` : null}
${image ? renderTemplate`<meta name="twitter:image"${addAttribute(image, "content")}>` : null}
${imageAlt ? renderTemplate`<meta name="twitter:image:alt"${addAttribute(imageAlt, "content")}>` : null}
${description ? renderTemplate`<meta name="twitter:description"${addAttribute(description, "content")}>` : null}
${creator ? renderTemplate`<meta name="twitter:creator"${addAttribute(creator, "content")}>` : null}`;
}, "/Users/shaun/Desktop/lab/astrojobs/node_modules/astro-seo/src/components/TwitterTags.astro");

const $$Astro$2 = createAstro("https://astrojobs.net");
const $$SEO = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$2, $$props, $$slots);
  Astro2.self = $$SEO;
  Astro2.props.surpressWarnings = true;
  function validateProps(props) {
    if (props.openGraph) {
      if (!props.openGraph.basic || props.openGraph.basic.title == null || props.openGraph.basic.type == null || props.openGraph.basic.image == null) {
        throw new Error(
          "If you pass the openGraph prop, you have to at least define the title, type, and image basic properties!"
        );
      }
    }
    if (props.title && props.openGraph?.basic.title) {
      if (props.title == props.openGraph.basic.title && !props.surpressWarnings) {
        console.warn(
          "WARNING(astro-seo): You passed the same value to `title` and `openGraph.optional.title`. This is most likely not what you want. See docs for more."
        );
      }
    }
    if (props.openGraph?.basic?.image && !props.openGraph?.image?.alt && !props.surpressWarnings) {
      console.warn(
        "WARNING(astro-seo): You defined `openGraph.basic.image`, but didn't define `openGraph.image.alt`. This is stongly discouraged.'"
      );
    }
  }
  validateProps(Astro2.props);
  let updatedTitle = "";
  if (Astro2.props.title) {
    updatedTitle = Astro2.props.title;
    if (Astro2.props.titleTemplate) {
      updatedTitle = Astro2.props.titleTemplate.replace(/%s/g, updatedTitle);
    }
  } else if (Astro2.props.titleDefault) {
    updatedTitle = Astro2.props.titleDefault;
  }
  return renderTemplate`${updatedTitle ? renderTemplate`<title>${unescapeHTML(updatedTitle)}</title>` : null}

${Astro2.props.charset ? renderTemplate`<meta${addAttribute(Astro2.props.charset, "charset")}>` : null}

<link rel="canonical"${addAttribute(Astro2.props.canonical || Astro2.url.href, "href")}>

${Astro2.props.description ? renderTemplate`<meta name="description"${addAttribute(Astro2.props.description, "content")}>` : null}

<meta name="robots"${addAttribute(`${Astro2.props.noindex ? "noindex" : "index"}, ${Astro2.props.nofollow ? "nofollow" : "follow"}`, "content")}>

${Astro2.props.openGraph && renderTemplate`${renderComponent($$result, "OpenGraphBasicTags", $$OpenGraphBasicTags, { ...Astro2.props })}`}
${Astro2.props.openGraph?.optional && renderTemplate`${renderComponent($$result, "OpenGraphOptionalTags", $$OpenGraphOptionalTags, { ...Astro2.props })}`}
${Astro2.props.openGraph?.image && renderTemplate`${renderComponent($$result, "OpenGraphImageTags", $$OpenGraphImageTags, { ...Astro2.props })}`}
${Astro2.props.openGraph?.article && renderTemplate`${renderComponent($$result, "OpenGraphArticleTags", $$OpenGraphArticleTags, { ...Astro2.props })}`}
${Astro2.props.twitter && renderTemplate`${renderComponent($$result, "TwitterTags", $$TwitterTags, { ...Astro2.props })}`}
${Astro2.props.extend && renderTemplate`${renderComponent($$result, "ExtendedTags", $$ExtendedTags, { ...Astro2.props })}`}`;
}, "/Users/shaun/Desktop/lab/astrojobs/node_modules/astro-seo/src/SEO.astro");

const seoConfig = {
  baseURL: "https://astrojobs.net",
  // Change this to your production URL.
  description: "Find jobs or post offers centered around Astro, the framework that makes the web faster.",
  // Change this to be your website's description.
  type: "website",
  image: {
    url: "https://picsum.photos/1200/630",
    // Change this to your website's thumbnail.
    alt: "OpenGraph thumbnail description.",
    // Change this to your website's thumbnail description.
    width: 1200,
    height: 630
  },
  siteName: "AstroJobs",
  // Change this to your website's name,
  twitter: {
    card: "summary_large_image"
  }
};

const Background = "/_astro/bg.2ab9f47c.svg";

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro$1 = createAstro("https://astrojobs.net");
const $$Layout = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$Layout;
  const {
    title,
    ogTitle,
    description,
    image,
    disableIndexing = false
  } = Astro2.props;
  return renderTemplate(_a || (_a = __template(['<html lang="en">\n	<head>\n		<!-- SEO. -->\n		', '\n\n		<!-- Global meta tags. -->\n		<meta charset="utf-8">\n		<meta name="viewport" content="width=device-width, initial-scale=1">\n\n		<!-- Favicons. -->\n		<link rel="apple-touch-icon" sizes="57x57" href="/favicons/favicon-57x57.png">\n		<link rel="apple-touch-icon" sizes="60x60" href="/favicons/favicon-60x60.png">\n		<link rel="apple-touch-icon" sizes="72x72" href="/favicons/favicon-72x72.png">\n		<link rel="apple-touch-icon" sizes="76x76" href="/favicons/favicon-76x76.png">\n		<link rel="apple-touch-icon" sizes="114x114" href="/favicons/favicon-114x114.png">\n		<link rel="apple-touch-icon" sizes="120x120" href="/favicons/favicon-120x120.png">\n		<link rel="apple-touch-icon" sizes="144x144" href="/favicons/favicon-144x144.png">\n		<link rel="apple-touch-icon" sizes="152x152" href="/favicons/favicon-152x152.png">\n		<link rel="apple-touch-icon" sizes="180x180" href="/favicons/favicon-180x180.png">\n		<link rel="icon" type="image/png" sizes="16x16" href="/favicons/favicon-16x16.png">\n		<link rel="icon" type="image/png" sizes="32x32" href="/favicons/favicon-32x32.png">\n		<link rel="icon" type="image/png" sizes="96x96" href="/favicons/favicon-96x96.png">\n		<link rel="icon" type="image/png" sizes="192x192" href="/favicons/favicon-192x192.png">\n		<link rel="shortcut icon" type="image/x-icon" href="/favicons/favicon.ico">\n		<link rel="icon" type="image/x-icon" href="/favicons/favicon.ico">\n		<meta name="msapplication-TileColor" content="#ea580c">\n		<meta name="msapplication-TileImage" content="/favicons/favicon-144x144.png">\n		<meta name="msapplication-config" content="/browserconfig.xml">\n		<link rel="icon" type="image/svg+xml" href="/favicons/favicon.svg">\n		<meta name="theme-color" content="#ea580c">\n\n		<script async defer data-website-id="923892f7-91b8-43fe-8639-d41f74b73aa1" src="https://umami.services.shaunchander.me/umami.js"><\/script>\n	', '</head>\n	<body class="min-h-screen flex flex-col w-full overflow-x-hidden font-body text-slate-950 bg-zinc-100 relative dark:bg-slate-950 dark:text-zinc-100">\n		', '\n		<main class="flex flex-1 flex-col h-[100%] w-full relative z-10">\n			', '\n		</main>\n\n		<div class="absolute inset-0 pointer-events-none">\n			<img', ' alt="" class="w-full h-full dark:opacity-75">\n		</div>\n		', "\n	</body></html>"])), renderComponent($$result, "SEO", $$SEO, { "title": title, "description": seoConfig.description , "noindex": disableIndexing, "nofollow": disableIndexing, "openGraph": {
    basic: {
      title: ogTitle || title,
      type: "website",
      image: seoConfig.image.url 
    },
    image: {
      width: seoConfig.image.width,
      height: seoConfig.image.height,
      alt: seoConfig.image.alt 
    },
    optional: {
      siteName: seoConfig.siteName,
      description: seoConfig.description 
    }
  }, "twitter": {
    card: seoConfig.twitter.card
  } }), renderHead($$result), renderComponent($$result, "Header", Header, { "client:visible": true, "client:component-hydration": "visible", "client:component-path": "@globals", "client:component-export": "Header" }), renderSlot($$result, $$slots["default"]), addAttribute(Background, "src"), renderComponent($$result, "Footer", $$Footer, {}));
}, "/Users/shaun/Desktop/lab/astrojobs/apps/frontend/src/components/global/Layout/Layout.astro");

const $$Astro = createAstro("https://astrojobs.net");
const $$OfferPosted = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$OfferPosted;
  return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": "Offer Posted" }, { "default": ($$result2) => renderTemplate`
	${renderComponent($$result2, "Section", Section, { "id": "hero" }, { "default": ($$result3) => renderTemplate`
		${renderComponent($$result3, "Container", Container, {}, { "default": ($$result4) => renderTemplate`
			${maybeRenderHead($$result4)}<div class="text-center max-w-2xl mx-auto space-y-6">
				<h1>ðŸš€ Offer <span class="text-orange-600">posted</span>.</h1>
				<p>
					Your offer will be posted for 30 days! We'll be sending you a
					confirmation email as well as a one-time delete URL if you need to
					remove your listing.
				</p>
				<div class="max-w-xs mx-auto">
					<a href="/" class="btn btn-primary mx-auto">Return home</a>
				</div>
			</div>
		` })}
		<canvas id="my-canvas" class="fixed inset-0 pointer-events-none"></canvas>
	` })}
` })}`;
}, "/Users/shaun/Desktop/lab/astrojobs/apps/frontend/src/pages/offer-posted.astro");

const $$file = "/Users/shaun/Desktop/lab/astrojobs/apps/frontend/src/pages/offer-posted.astro";
const $$url = "/offer-posted";

const _page3 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    default: $$OfferPosted,
    file: $$file,
    url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const stripe$1 = new Stripe(({}).STRIPE_KEY, {
  apiVersion: "2022-11-15"
});
const get = async () => {
  try {
    const session = await stripe$1.checkout.sessions.create({
      line_items: [
        {
          price: "price_1Mv9yrHOTwAqSFb2L7Vq4uQT",
          quantity: 1
        }
      ],
      mode: "payment",
      success_url: `${seoConfig.baseURL}/offer-posted`,
      cancel_url: `${seoConfig.baseURL}/post-an-offer`
    });
    return {
      status: 200,
      body: JSON.stringify({ url: session.url, id: session.id })
    };
  } catch (err) {
    console.error(err);
    return {
      status: 400,
      body: "Bad request."
    };
  }
};

const _page4 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    get
}, Symbol.toStringTag, { value: 'Module' }));

const stripe = new Stripe(({}).STRIPE_KEY, {
  apiVersion: "2022-11-15"
});
const post$3 = async (ctx) => {
  const sig = ctx.request.headers.get("Stripe-Signature");
  const body = await ctx.request.text();
  let event;
  try {
    event = stripe.webhooks.constructEventAsync(
      body,
      sig,
      ({}).STRIPE_WEBHOOK_SECRET
    );
  } catch (err) {
    console.log(err);
    return {
      status: 400,
      body: "Bad request"
    };
  }
  switch ((await event).type) {
    case "checkout.session.completed":
      console.log("Activating job offer...");
      await activateJobOffer((await event).data.object.id);
      console.log("Job offer activated...");
      return {
        status: 200,
        body: "OK."
      };
  }
  return {
    status: 400,
    body: "Bad request."
  };
};

const _page5 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    post: post$3
}, Symbol.toStringTag, { value: 'Module' }));

const post$2 = async (ctx) => {
  let body;
  try {
    body = await ctx.request.json();
  } catch (err) {
    console.error(err);
    return {
      status: 400,
      body: "Bad request."
    };
  }
  if (!body._id) {
    return {
      status: 400,
      body: "Bad request."
    };
  }
  try {
    console.log("Deleting job offer...", body._id);
    await deleteJobOffer(body._id);
    console.log("Job offer deleted...");
    return {
      status: 200,
      body: "OK."
    };
  } catch (err) {
    console.error(err);
    return {
      status: 400,
      body: "Bad request."
    };
  }
};

const _page6 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    post: post$2
}, Symbol.toStringTag, { value: 'Module' }));

const post$1 = async (ctx) => {
  try {
    const formData = await ctx.request.formData();
    const companyLogoAsBuffer = await formData.get("company_logo").arrayBuffer();
    console.log("Uploading image...");
    const imageId = await postAsset(Buffer.from(companyLogoAsBuffer));
    console.log("Image uploaded.");
    const jobOffer = {
      _type: "job_offer",
      company_name: formData.get("company_name"),
      company_logo: {
        _type: "image",
        _ref: imageId
      },
      location: formData.get("location"),
      is_remote: formData.get("is_remote") === "on" ? true : false,
      role_title: formData.get("role_title"),
      is_full_time: formData.get("is_full_time") === "on" ? true : false,
      is_contract: formData.get("is_contract") === "on" ? true : false,
      salary_left_bound: Number(formData.get("salary_left_bound")),
      salary_right_bound: Number(formData.get("salary_right_bound")),
      meta_framework: formData.get("meta_framework"),
      email: formData.get("email"),
      stripe_id: formData.get("stripe_id"),
      is_active: Number(formData.get("free_slots")) > 0 ? true : false
    };
    console.log("Posting job offer...");
    const _id = await postJobOffer(jobOffer);
    console.log("Job offer posted!");
    await decrementFreeSlots();
    return {
      status: 200,
      body: JSON.stringify({ _id })
    };
  } catch (err) {
    console.log(err);
    return {
      status: 400,
      body: "An error occurred."
    };
  }
};

const _page7 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    post: post$1
}, Symbol.toStringTag, { value: 'Module' }));

const mailgun = new Mailgun(FormData);
const mg = mailgun.client({ username: "api", key: ({}).MAILGUN_KEY });
const post = async (ctx) => {
  let body;
  try {
    body = await ctx.request.json();
  } catch (err) {
    console.error(err);
    return {
      status: 400,
      body: "Bad request."
    };
  }
  if (!body._id) {
    return {
      status: 400,
      body: "Bad request."
    };
  }
  try {
    console.log("Sending email...");
    mg.messages.create("mg.astrojobs.net", {
      to: "shaunchander@gmail.com",
      from: "Astro Jobs <support@astrojobs.net>",
      subject: "Astro Jobs - Your job offer has been posted!",
      template: "post-success",
      "v:_id": body._id
    });
    console.log("Email sent.");
    return {
      status: 200,
      body: "OK."
    };
  } catch (err) {
    console.error(err);
    return {
      status: 400,
      body: "Bad request."
    };
  }
};

const _page8 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    post
}, Symbol.toStringTag, { value: 'Module' }));

export { $$Layout as $, Container as C, Section as S, _page3 as _, add_attribute as a, getSiteConfig as b, create_ssr_component as c, _page4 as d, escape as e, _page5 as f, getJobOffers as g, _page6 as h, _page7 as i, _page8 as j, resolveImageUrl as r, validate_component as v };
